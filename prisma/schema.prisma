// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  image     String?   // Optional field for storing image URL or path
  role      String   @default("user") // Default role for non-admin users
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profiles   Profile[]   // One-to-many relationship with Profile
  activities Activity[]  // One-to-many relationship with Activity
  documents  Document[]  // One-to-many relationship with Document
  logs       Log[]       // One-to-many relationship with Log
}

model Profile {
  id          String   @id @default(uuid())
  userId      String
  firstName   String
  middleName  String
  lastName    String
  phoneNumber String
  email       String
  dateHired   DateTime?
  designation String
  office      String
  region      String
  province    String
  city        String
  zipCode     String
  about       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  action    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  message   String
  eventType String   // Field to specify the type of event (e.g., "login", "logout")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
